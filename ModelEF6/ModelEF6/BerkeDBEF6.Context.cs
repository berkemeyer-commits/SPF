//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModelEF6
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BerkeDBEntities : DbContext
    {
        public BerkeDBEntities()
            : base("name=BerkeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CCiudad> CCiudad { get; set; }
        public virtual DbSet<CIdioma> CIdioma { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<MarcaRegRen> MarcaRegRen { get; set; }
        public virtual DbSet<MarcaTipo> MarcaTipo { get; set; }
        public virtual DbSet<TarifasxCliente> TarifasxCliente { get; set; }
        public virtual DbSet<tc_tarifascliente> tc_tarifascliente { get; set; }
        public virtual DbSet<TrabajoTipo> TrabajoTipo { get; set; }
        public virtual DbSet<Tramite_Sit> Tramite_Sit { get; set; }
        public virtual DbSet<trr_tramitetarifa> trr_tramitetarifa { get; set; }
        public virtual DbSet<tt_tipotarifa> tt_tipotarifa { get; set; }
        public virtual DbSet<Expediente> Expediente { get; set; }
        public virtual DbSet<pa_parametros> pa_parametros { get; set; }
        public virtual DbSet<OrdenTrabajo> OrdenTrabajo { get; set; }
        public virtual DbSet<rcm_relacotizamone> rcm_relacotizamone { get; set; }
        public virtual DbSet<Tarifas> Tarifas { get; set; }
        public virtual DbSet<ClienteXTramite> ClienteXTramite { get; set; }
        public virtual DbSet<ca_clienteantecedente> ca_clienteantecedente { get; set; }
        public virtual DbSet<ch_clientehistorico> ch_clientehistorico { get; set; }
        public virtual DbSet<ConfigPresup> ConfigPresup { get; set; }
        public virtual DbSet<Merge> Merge { get; set; }
        public virtual DbSet<DocumentoPlantilla> DocumentoPlantilla { get; set; }
        public virtual DbSet<ExpedienteCampo> ExpedienteCampo { get; set; }
        public virtual DbSet<Clase> Clase { get; set; }
        public virtual DbSet<ClaseTipo> ClaseTipo { get; set; }
        public virtual DbSet<Traduccion> Traduccion { get; set; }
        public virtual DbSet<ExpedienteXPoder> ExpedienteXPoder { get; set; }
        public virtual DbSet<Poder> Poder { get; set; }
        public virtual DbSet<PropietarioXPoder> PropietarioXPoder { get; set; }
        public virtual DbSet<Propietario> Propietario { get; set; }
        public virtual DbSet<ExpedienteXPropietario> ExpedienteXPropietario { get; set; }
        public virtual DbSet<Mes> Mes { get; set; }
        public virtual DbSet<pp_partepresupuesto> pp_partepresupuesto { get; set; }
        public virtual DbSet<CArea> CArea { get; set; }
        public virtual DbSet<Proceso> Proceso { get; set; }
        public virtual DbSet<cp_cotizacionesxpresup> cp_cotizacionesxpresup { get; set; }
        public virtual DbSet<pd_presupuestodetalle> pd_presupuestodetalle { get; set; }
        public virtual DbSet<Atencion> Atencion { get; set; }
        public virtual DbSet<ba_banco> ba_banco { get; set; }
        public virtual DbSet<fp_formadepago> fp_formadepago { get; set; }
        public virtual DbSet<sa_subarea> sa_subarea { get; set; }
        public virtual DbSet<pm_pcabxmergeexpe> pm_pcabxmergeexpe { get; set; }
        public virtual DbSet<op_oposicion> op_oposicion { get; set; }
        public virtual DbSet<ac_areacontabilidad> ac_areacontabilidad { get; set; }
        public virtual DbSet<un_unidadnegocio> un_unidadnegocio { get; set; }
        public virtual DbSet<pmu_pagomultiple> pmu_pagomultiple { get; set; }
        public virtual DbSet<ncd_notacreditopresupdetalle> ncd_notacreditopresupdetalle { get; set; }
        public virtual DbSet<ncp_notacreditopresup> ncp_notacreditopresup { get; set; }
        public virtual DbSet<MergeDoc> MergeDoc { get; set; }
        public virtual DbSet<ph_presupuestohistorico> ph_presupuestohistorico { get; set; }
        public virtual DbSet<Correspondencia> Correspondencia { get; set; }
        public virtual DbSet<gg_gastogeneral> gg_gastogeneral { get; set; }
        public virtual DbSet<tsp_tiposolicitudpago> tsp_tiposolicitudpago { get; set; }
        public virtual DbSet<tm_tipomovimientocuenta> tm_tipomovimientocuenta { get; set; }
        public virtual DbSet<sxp_solicitudesxpago> sxp_solicitudesxpago { get; set; }
        public virtual DbSet<mc_movimientoscuenta> mc_movimientoscuenta { get; set; }
        public virtual DbSet<tf_tipofactura> tf_tipofactura { get; set; }
        public virtual DbSet<cxm_cobranzasxmov> cxm_cobranzasxmov { get; set; }
        public virtual DbSet<tc_tipocambio> tc_tipocambio { get; set; }
        public virtual DbSet<sr_seguimientoreporte> sr_seguimientoreporte { get; set; }
        public virtual DbSet<cct_cierrecuenta> cct_cierrecuenta { get; set; }
        public virtual DbSet<cm_cierremovimiento> cm_cierremovimiento { get; set; }
        public virtual DbSet<pr_proveedor> pr_proveedor { get; set; }
        public virtual DbSet<Situacion> Situacion { get; set; }
        public virtual DbSet<CAgenteLocal> CAgenteLocal { get; set; }
        public virtual DbSet<mu_mergeurgparte> mu_mergeurgparte { get; set; }
        public virtual DbSet<cnd_controlnumdoc> cnd_controlnumdoc { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<ta_tipoantecedente> ta_tipoantecedente { get; set; }
        public virtual DbSet<tse_tiposistelectronico> tse_tiposistelectronico { get; set; }
        public virtual DbSet<pp_pagopresupuesto> pp_pagopresupuesto { get; set; }
        public virtual DbSet<rm_rolmenu> rm_rolmenu { get; set; }
        public virtual DbSet<ro_rol> ro_rol { get; set; }
        public virtual DbSet<td_tipodocumento> td_tipodocumento { get; set; }
        public virtual DbSet<Merge_Expediente> Merge_Expediente { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<ra_reporteasunto> ra_reporteasunto { get; set; }
        public virtual DbSet<Audit_pp_pagopresupuesto> Audit_pp_pagopresupuesto { get; set; }
        public virtual DbSet<nf_numeracionfactura> nf_numeracionfactura { get; set; }
        public virtual DbSet<su_serieusuario> su_serieusuario { get; set; }
        public virtual DbSet<ru_rolusuario> ru_rolusuario { get; set; }
        public virtual DbSet<mn_menu> mn_menu { get; set; }
        public virtual DbSet<cc_cotizacioncab> cc_cotizacioncab { get; set; }
        public virtual DbSet<co_continente> co_continente { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<ccm_conclictamoneda> ccm_conclictamoneda { get; set; }
        public virtual DbSet<cb_cuentabanco> cb_cuentabanco { get; set; }
        public virtual DbSet<rc_reclamocliente> rc_reclamocliente { get; set; }
        public virtual DbSet<rd_reclamoclientedetalle> rd_reclamoclientedetalle { get; set; }
        public virtual DbSet<pc_presupuestocab> pc_presupuestocab { get; set; }
        public virtual DbSet<sed_solexclusiondet> sed_solexclusiondet { get; set; }
        public virtual DbSet<spc_solicitudpagocab> spc_solicitudpagocab { get; set; }
        public virtual DbSet<sec_solexclusioncab> sec_solexclusioncab { get; set; }
        public virtual DbSet<spd_solicitudpagodet> spd_solicitudpagodet { get; set; }
        public virtual DbSet<fpc_facturapresupuestocab> fpc_facturapresupuestocab { get; set; }
        public virtual DbSet<fpd_facturapresupuestodet> fpd_facturapresupuestodet { get; set; }
        public virtual DbSet<AtencionXVia> AtencionXVia { get; set; }
        public virtual DbSet<ps_pagosolicitud> ps_pagosolicitud { get; set; }
        public virtual DbSet<Audit_op_oposicion> Audit_op_oposicion { get; set; }
        public virtual DbSet<spac_solicitudpagoarchivocab> spac_solicitudpagoarchivocab { get; set; }
        public virtual DbSet<spad_solicitudpagoarchivodet> spad_solicitudpagoarchivodet { get; set; }
        public virtual DbSet<Tramite> Tramite { get; set; }
        public virtual DbSet<CPais> CPais { get; set; }
        public virtual DbSet<Moneda> Moneda { get; set; }
        public virtual DbSet<tcd_tipocambiode> tcd_tipocambiode { get; set; }
        public virtual DbSet<ad_autorizaciondocumento> ad_autorizaciondocumento { get; set; }
        public virtual DbSet<ti_timbrado> ti_timbrado { get; set; }
        public virtual DbSet<me_motivoemision> me_motivoemision { get; set; }
        public virtual DbSet<Audit_fc_facturacabecera> Audit_fc_facturacabecera { get; set; }
        public virtual DbSet<Audit_nc_notacreditocabecera> Audit_nc_notacreditocabecera { get; set; }
        public virtual DbSet<fc_facturacabecera> fc_facturacabecera { get; set; }
        public virtual DbSet<fd_facturadetalle> fd_facturadetalle { get; set; }
        public virtual DbSet<nc_notacreditocabecera> nc_notacreditocabecera { get; set; }
        public virtual DbSet<nd_notacreditodetalle> nd_notacreditodetalle { get; set; }
    
        [DbFunction("BerkeDBEntities", "GetAutorizacionPorDocumentoID")]
        public virtual IQueryable<Nullable<bool>> GetAutorizacionPorDocumentoID(Nullable<int> tipoDocumentoID, Nullable<int> documentoID, Nullable<int> usuarioID)
        {
            var tipoDocumentoIDParameter = tipoDocumentoID.HasValue ?
                new ObjectParameter("TipoDocumentoID", tipoDocumentoID) :
                new ObjectParameter("TipoDocumentoID", typeof(int));
    
            var documentoIDParameter = documentoID.HasValue ?
                new ObjectParameter("DocumentoID", documentoID) :
                new ObjectParameter("DocumentoID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<bool>>("[BerkeDBEntities].[GetAutorizacionPorDocumentoID](@TipoDocumentoID, @DocumentoID, @UsuarioID)", tipoDocumentoIDParameter, documentoIDParameter, usuarioIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "getDescripTarifaTable")]
        public virtual IQueryable<string> getDescripTarifaTable(Nullable<int> cotizacioncabID)
        {
            var cotizacioncabIDParameter = cotizacioncabID.HasValue ?
                new ObjectParameter("cotizacioncabID", cotizacioncabID) :
                new ObjectParameter("cotizacioncabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[BerkeDBEntities].[getDescripTarifaTable](@cotizacioncabID)", cotizacioncabIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "ConcatSerieNroPresupuesto")]
        public virtual IQueryable<string> ConcatSerieNroPresupuesto(string serie, Nullable<int> nroPresupuesto)
        {
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            var nroPresupuestoParameter = nroPresupuesto.HasValue ?
                new ObjectParameter("NroPresupuesto", nroPresupuesto) :
                new ObjectParameter("NroPresupuesto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[BerkeDBEntities].[ConcatSerieNroPresupuesto](@Serie, @NroPresupuesto)", serieParameter, nroPresupuestoParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetDocumentoNro")]
        public virtual IQueryable<string> GetDocumentoNro(Nullable<int> presupuestoID)
        {
            var presupuestoIDParameter = presupuestoID.HasValue ?
                new ObjectParameter("PresupuestoID", presupuestoID) :
                new ObjectParameter("PresupuestoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[BerkeDBEntities].[GetDocumentoNro](@PresupuestoID)", presupuestoIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetComprobanteNro")]
        public virtual IQueryable<GetComprobanteNro_Result> GetComprobanteNro(Nullable<int> tipoDocumentoD, string serie, string timbrado, Nullable<System.DateTime> fechaComprobante)
        {
            var tipoDocumentoDParameter = tipoDocumentoD.HasValue ?
                new ObjectParameter("TipoDocumentoD", tipoDocumentoD) :
                new ObjectParameter("TipoDocumentoD", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            var timbradoParameter = timbrado != null ?
                new ObjectParameter("Timbrado", timbrado) :
                new ObjectParameter("Timbrado", typeof(string));
    
            var fechaComprobanteParameter = fechaComprobante.HasValue ?
                new ObjectParameter("FechaComprobante", fechaComprobante) :
                new ObjectParameter("FechaComprobante", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetComprobanteNro_Result>("[BerkeDBEntities].[GetComprobanteNro](@TipoDocumentoD, @Serie, @Timbrado, @FechaComprobante)", tipoDocumentoDParameter, serieParameter, timbradoParameter, fechaComprobanteParameter);
        }
    
        public virtual ObjectResult<GetListadoParaComision_Result> GetListadoParaComision(string fechaDesde, string fechaHasta, string clienteID, string usuarioID)
        {
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var usuarioIDParameter = usuarioID != null ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoParaComision_Result>("GetListadoParaComision", fechaDesdeParameter, fechaHastaParameter, clienteIDParameter, usuarioIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetFechaDocumento")]
        public virtual IQueryable<Nullable<System.DateTime>> GetFechaDocumento(Nullable<int> presupuestoID)
        {
            var presupuestoIDParameter = presupuestoID.HasValue ?
                new ObjectParameter("PresupuestoID", presupuestoID) :
                new ObjectParameter("PresupuestoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[BerkeDBEntities].[GetFechaDocumento](@PresupuestoID)", presupuestoIDParameter);
        }
    
        public virtual ObjectResult<GetDocumentoAPagar_Result> GetDocumentoAPagar(string filtro, string valorInt, string valorAlfa)
        {
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var valorIntParameter = valorInt != null ?
                new ObjectParameter("ValorInt", valorInt) :
                new ObjectParameter("ValorInt", typeof(string));
    
            var valorAlfaParameter = valorAlfa != null ?
                new ObjectParameter("ValorAlfa", valorAlfa) :
                new ObjectParameter("ValorAlfa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentoAPagar_Result>("GetDocumentoAPagar", filtroParameter, valorIntParameter, valorAlfaParameter);
        }
    
        public virtual ObjectResult<GetPresupuestoXSolicitudPago_Result> GetPresupuestoXSolicitudPago(string filtrarPor, Nullable<int> valorInt)
        {
            var filtrarPorParameter = filtrarPor != null ?
                new ObjectParameter("FiltrarPor", filtrarPor) :
                new ObjectParameter("FiltrarPor", typeof(string));
    
            var valorIntParameter = valorInt.HasValue ?
                new ObjectParameter("ValorInt", valorInt) :
                new ObjectParameter("ValorInt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresupuestoXSolicitudPago_Result>("GetPresupuestoXSolicitudPago", filtrarPorParameter, valorIntParameter);
        }
    
        public virtual ObjectResult<GetSolicitudesXCliente_Result> GetSolicitudesXCliente(string clienteID)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSolicitudesXCliente_Result>("GetSolicitudesXCliente", clienteIDParameter);
        }
    
        public virtual ObjectResult<DetallePagosPorDocumento_Result> DetallePagosPorDocumento(string clienteID, string fechaDesde, string fechaHasta)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetallePagosPorDocumento_Result>("DetallePagosPorDocumento", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<GetListadoGeneralPagos_Result> GetListadoGeneralPagos(string fechaIni, string fechaFin)
        {
            var fechaIniParameter = fechaIni != null ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoGeneralPagos_Result>("GetListadoGeneralPagos", fechaIniParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<GetLibroBanco_Result> GetLibroBanco(Nullable<int> cuentaID, string fechaInicio, string fechaFin)
        {
            var cuentaIDParameter = cuentaID.HasValue ?
                new ObjectParameter("CuentaID", cuentaID) :
                new ObjectParameter("CuentaID", typeof(int));
    
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLibroBanco_Result>("GetLibroBanco", cuentaIDParameter, fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<RepOrdenPagoxID_Result> RepOrdenPagoxID(Nullable<int> pagoProveedorID)
        {
            var pagoProveedorIDParameter = pagoProveedorID.HasValue ?
                new ObjectParameter("PagoProveedorID", pagoProveedorID) :
                new ObjectParameter("PagoProveedorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepOrdenPagoxID_Result>("RepOrdenPagoxID", pagoProveedorIDParameter);
        }
    
        public virtual ObjectResult<GetListaPagosPendientes_Result> GetListaPagosPendientes(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagosPendientes_Result>("GetListaPagosPendientes", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaPagosPendientesConso_Result> GetListaPagosPendientesConso(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagosPendientesConso_Result>("GetListaPagosPendientesConso", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetDisponibilidadEnBanco_Result> GetDisponibilidadEnBanco(Nullable<int> pBancoID, string fecha)
        {
            var pBancoIDParameter = pBancoID.HasValue ?
                new ObjectParameter("pBancoID", pBancoID) :
                new ObjectParameter("pBancoID", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDisponibilidadEnBanco_Result>("GetDisponibilidadEnBanco", pBancoIDParameter, fechaParameter);
        }
    
        public virtual ObjectResult<RepHojaCotizacion_Result> RepHojaCotizacion(string listaExpedientes, string agrupadoPor, Nullable<int> tramiteID)
        {
            var listaExpedientesParameter = listaExpedientes != null ?
                new ObjectParameter("ListaExpedientes", listaExpedientes) :
                new ObjectParameter("ListaExpedientes", typeof(string));
    
            var agrupadoPorParameter = agrupadoPor != null ?
                new ObjectParameter("AgrupadoPor", agrupadoPor) :
                new ObjectParameter("AgrupadoPor", typeof(string));
    
            var tramiteIDParameter = tramiteID.HasValue ?
                new ObjectParameter("TramiteID", tramiteID) :
                new ObjectParameter("TramiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepHojaCotizacion_Result>("RepHojaCotizacion", listaExpedientesParameter, agrupadoPorParameter, tramiteIDParameter);
        }
    
        public virtual ObjectResult<GetEstadoCuentaGerencial_Result> GetEstadoCuentaGerencial(string fechaHasta, string monedaID, Nullable<decimal> tipoCambio)
        {
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEstadoCuentaGerencial_Result>("GetEstadoCuentaGerencial", fechaHastaParameter, monedaIDParameter, tipoCambioParameter);
        }
    
        public virtual ObjectResult<GetCotizacionesParaPresupuestos_Result> GetCotizacionesParaPresupuestos(string clienteID, string hINro, string hIAnho, string actaNro, string actaAnio, string expedienteID, string cotizacionID, string fechaDesde, string fechaHasta, string listaTramite, string generados)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var hINroParameter = hINro != null ?
                new ObjectParameter("HINro", hINro) :
                new ObjectParameter("HINro", typeof(string));
    
            var hIAnhoParameter = hIAnho != null ?
                new ObjectParameter("HIAnho", hIAnho) :
                new ObjectParameter("HIAnho", typeof(string));
    
            var actaNroParameter = actaNro != null ?
                new ObjectParameter("ActaNro", actaNro) :
                new ObjectParameter("ActaNro", typeof(string));
    
            var actaAnioParameter = actaAnio != null ?
                new ObjectParameter("ActaAnio", actaAnio) :
                new ObjectParameter("ActaAnio", typeof(string));
    
            var expedienteIDParameter = expedienteID != null ?
                new ObjectParameter("ExpedienteID", expedienteID) :
                new ObjectParameter("ExpedienteID", typeof(string));
    
            var cotizacionIDParameter = cotizacionID != null ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var listaTramiteParameter = listaTramite != null ?
                new ObjectParameter("ListaTramite", listaTramite) :
                new ObjectParameter("ListaTramite", typeof(string));
    
            var generadosParameter = generados != null ?
                new ObjectParameter("Generados", generados) :
                new ObjectParameter("Generados", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCotizacionesParaPresupuestos_Result>("GetCotizacionesParaPresupuestos", clienteIDParameter, hINroParameter, hIAnhoParameter, actaNroParameter, actaAnioParameter, expedienteIDParameter, cotizacionIDParameter, fechaDesdeParameter, fechaHastaParameter, listaTramiteParameter, generadosParameter);
        }
    
        public virtual ObjectResult<GetListaParaRepCobrosGcial_Result> GetListaParaRepCobrosGcial(string whereString, Nullable<bool> soloCobrosNuevos)
        {
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            var soloCobrosNuevosParameter = soloCobrosNuevos.HasValue ?
                new ObjectParameter("SoloCobrosNuevos", soloCobrosNuevos) :
                new ObjectParameter("SoloCobrosNuevos", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaParaRepCobrosGcial_Result>("GetListaParaRepCobrosGcial", whereStringParameter, soloCobrosNuevosParameter);
        }
    
        public virtual ObjectResult<GetRepCobranzasPorUnidNegocio_Result> GetRepCobranzasPorUnidNegocio(string listaCobroID, Nullable<bool> soloCobrosNuevos)
        {
            var listaCobroIDParameter = listaCobroID != null ?
                new ObjectParameter("ListaCobroID", listaCobroID) :
                new ObjectParameter("ListaCobroID", typeof(string));
    
            var soloCobrosNuevosParameter = soloCobrosNuevos.HasValue ?
                new ObjectParameter("SoloCobrosNuevos", soloCobrosNuevos) :
                new ObjectParameter("SoloCobrosNuevos", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepCobranzasPorUnidNegocio_Result>("GetRepCobranzasPorUnidNegocio", listaCobroIDParameter, soloCobrosNuevosParameter);
        }
    
        public virtual ObjectResult<GetUltimoCierreMesAnho_Result> GetUltimoCierreMesAnho()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUltimoCierreMesAnho_Result>("GetUltimoCierreMesAnho");
        }
    
        public virtual ObjectResult<GetListaCuentasPorCierre_Result> GetListaCuentasPorCierre(Nullable<int> mes, Nullable<int> anho)
        {
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var anhoParameter = anho.HasValue ?
                new ObjectParameter("Anho", anho) :
                new ObjectParameter("Anho", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaCuentasPorCierre_Result>("GetListaCuentasPorCierre", mesParameter, anhoParameter);
        }
    
        [DbFunction("BerkeDBEntities", "CheckMesCerradoTable")]
        public virtual IQueryable<Nullable<bool>> CheckMesCerradoTable(Nullable<System.DateTime> fechaMovimiento)
        {
            var fechaMovimientoParameter = fechaMovimiento.HasValue ?
                new ObjectParameter("FechaMovimiento", fechaMovimiento) :
                new ObjectParameter("FechaMovimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<bool>>("[BerkeDBEntities].[CheckMesCerradoTable](@FechaMovimiento)", fechaMovimientoParameter);
        }
    
        public virtual ObjectResult<GetRepCobranzasPorUnidNegocioV2_Result> GetRepCobranzasPorUnidNegocioV2(string listaCobroID, Nullable<bool> soloCobrosNuevos)
        {
            var listaCobroIDParameter = listaCobroID != null ?
                new ObjectParameter("ListaCobroID", listaCobroID) :
                new ObjectParameter("ListaCobroID", typeof(string));
    
            var soloCobrosNuevosParameter = soloCobrosNuevos.HasValue ?
                new ObjectParameter("SoloCobrosNuevos", soloCobrosNuevos) :
                new ObjectParameter("SoloCobrosNuevos", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepCobranzasPorUnidNegocioV2_Result>("GetRepCobranzasPorUnidNegocioV2", listaCobroIDParameter, soloCobrosNuevosParameter);
        }
    
        public virtual ObjectResult<GetListaPresupuestos_Result> GetListaPresupuestos(Nullable<int> usuarioID, string whereString)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPresupuestos_Result>("GetListaPresupuestos", usuarioIDParameter, whereStringParameter);
        }
    
        public virtual ObjectResult<GetListaUrgimientos_Result> GetListaUrgimientos(Nullable<int> situacionID, string whereString, string whereStringProv)
        {
            var situacionIDParameter = situacionID.HasValue ?
                new ObjectParameter("SituacionID", situacionID) :
                new ObjectParameter("SituacionID", typeof(int));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            var whereStringProvParameter = whereStringProv != null ?
                new ObjectParameter("WhereStringProv", whereStringProv) :
                new ObjectParameter("WhereStringProv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaUrgimientos_Result>("GetListaUrgimientos", situacionIDParameter, whereStringParameter, whereStringProvParameter);
        }
    
        public virtual ObjectResult<GetMergeAviVencEspecialesCab_Result> GetMergeAviVencEspecialesCab(Nullable<System.DateTime> fechaBase, Nullable<int> clienteID, Nullable<int> plazoP)
        {
            var fechaBaseParameter = fechaBase.HasValue ?
                new ObjectParameter("FechaBase", fechaBase) :
                new ObjectParameter("FechaBase", typeof(System.DateTime));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var plazoPParameter = plazoP.HasValue ?
                new ObjectParameter("PlazoP", plazoP) :
                new ObjectParameter("PlazoP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMergeAviVencEspecialesCab_Result>("GetMergeAviVencEspecialesCab", fechaBaseParameter, clienteIDParameter, plazoPParameter);
        }
    
        public virtual ObjectResult<GetMenuPorUsuario_Result> GetMenuPorUsuario(string usuarioNombre)
        {
            var usuarioNombreParameter = usuarioNombre != null ?
                new ObjectParameter("UsuarioNombre", usuarioNombre) :
                new ObjectParameter("UsuarioNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuPorUsuario_Result>("GetMenuPorUsuario", usuarioNombreParameter);
        }
    
        public virtual ObjectResult<GetMenuPorUsuarioSIGO2_Result> GetMenuPorUsuarioSIGO2(string usuarioNombre, Nullable<int> sistemaID)
        {
            var usuarioNombreParameter = usuarioNombre != null ?
                new ObjectParameter("UsuarioNombre", usuarioNombre) :
                new ObjectParameter("UsuarioNombre", typeof(string));
    
            var sistemaIDParameter = sistemaID.HasValue ?
                new ObjectParameter("SistemaID", sistemaID) :
                new ObjectParameter("SistemaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuPorUsuarioSIGO2_Result>("GetMenuPorUsuarioSIGO2", usuarioNombreParameter, sistemaIDParameter);
        }
    
        public virtual ObjectResult<GetListaPagoCorresponsales_Result> GetListaPagoCorresponsales(Nullable<int> usuarioID, string whereString)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagoCorresponsales_Result>("GetListaPagoCorresponsales", usuarioIDParameter, whereStringParameter);
        }
    
        public virtual ObjectResult<GetDocumentoAPagarCorresponsal_Result> GetDocumentoAPagarCorresponsal(string filtro, string valorInt, string valorAlfa)
        {
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var valorIntParameter = valorInt != null ?
                new ObjectParameter("ValorInt", valorInt) :
                new ObjectParameter("ValorInt", typeof(string));
    
            var valorAlfaParameter = valorAlfa != null ?
                new ObjectParameter("ValorAlfa", valorAlfa) :
                new ObjectParameter("ValorAlfa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentoAPagarCorresponsal_Result>("GetDocumentoAPagarCorresponsal", filtroParameter, valorIntParameter, valorAlfaParameter);
        }
    
        public virtual ObjectResult<GetListaClientes_Result> GetListaClientes(string whereString, string whereAntecObs)
        {
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            var whereAntecObsParameter = whereAntecObs != null ?
                new ObjectParameter("WhereAntecObs", whereAntecObs) :
                new ObjectParameter("WhereAntecObs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaClientes_Result>("GetListaClientes", whereStringParameter, whereAntecObsParameter);
        }
    
        public virtual ObjectResult<GetListadoGeneraldeDeudas_Result> GetListadoGeneraldeDeudas(string fechaDesde, string fechaHasta, string clienteID, string estado, Nullable<bool> datosClienteLocales, Nullable<bool> incluiFechaPago)
        {
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var datosClienteLocalesParameter = datosClienteLocales.HasValue ?
                new ObjectParameter("DatosClienteLocales", datosClienteLocales) :
                new ObjectParameter("DatosClienteLocales", typeof(bool));
    
            var incluiFechaPagoParameter = incluiFechaPago.HasValue ?
                new ObjectParameter("IncluiFechaPago", incluiFechaPago) :
                new ObjectParameter("IncluiFechaPago", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoGeneraldeDeudas_Result>("GetListadoGeneraldeDeudas", fechaDesdeParameter, fechaHastaParameter, clienteIDParameter, estadoParameter, datosClienteLocalesParameter, incluiFechaPagoParameter);
        }
    
        public virtual ObjectResult<GetListaFacturas_Result> GetListaFacturas(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturas_Result>("GetListaFacturas", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasConso_Result> GetListaFacturasConso(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasConso_Result>("GetListaFacturasConso", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasRegExt_Result> GetListaFacturasRegExt(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasRegExt_Result>("GetListaFacturasRegExt", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasRegExtParaGanancia_Result> GetListaFacturasRegExtParaGanancia(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasRegExtParaGanancia_Result>("GetListaFacturasRegExtParaGanancia", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasRegExtParaGananciaPrePago_Result> GetListaFacturasRegExtParaGananciaPrePago(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasRegExtParaGananciaPrePago_Result>("GetListaFacturasRegExtParaGananciaPrePago", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasRegExtParaGananciaPrePagoObligado_Result> GetListaFacturasRegExtParaGananciaPrePagoObligado(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasRegExtParaGananciaPrePagoObligado_Result>("GetListaFacturasRegExtParaGananciaPrePagoObligado", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasRegExtConso_Result> GetListaFacturasRegExtConso(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasRegExtConso_Result>("GetListaFacturasRegExtConso", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetEstadoCuentaGerencialPG_Result> GetEstadoCuentaGerencialPG(string fechaHasta, string monedaID, Nullable<decimal> tipoCambio)
        {
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEstadoCuentaGerencialPG_Result>("GetEstadoCuentaGerencialPG", fechaHastaParameter, monedaIDParameter, tipoCambioParameter);
        }
    
        public virtual ObjectResult<GetListaPagosPendientesConsoPG_Result> GetListaPagosPendientesConsoPG(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagosPendientesConsoPG_Result>("GetListaPagosPendientesConsoPG", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaPagosPendientesPG_Result> GetListaPagosPendientesPG(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagosPendientesPG_Result>("GetListaPagosPendientesPG", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasConsoPG_Result> GetListaFacturasConsoPG(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasConsoPG_Result>("GetListaFacturasConsoPG", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasPG_Result> GetListaFacturasPG(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasPG_Result>("GetListaFacturasPG", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetCotizacionConfeccionadoPorTable")]
        public virtual IQueryable<GetCotizacionConfeccionadoPorTable_Result> GetCotizacionConfeccionadoPorTable(Nullable<int> cotizacionID)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCotizacionConfeccionadoPorTable_Result>("[BerkeDBEntities].[GetCotizacionConfeccionadoPorTable](@CotizacionID)", cotizacionIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetCotizacionResponsableTable")]
        public virtual IQueryable<GetCotizacionResponsableTable_Result> GetCotizacionResponsableTable(Nullable<int> cotizacionID)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCotizacionResponsableTable_Result>("[BerkeDBEntities].[GetCotizacionResponsableTable](@CotizacionID)", cotizacionIDParameter);
        }
    
        public virtual ObjectResult<GetListadoCotizaciones_Result> GetListadoCotizaciones(string whereString)
        {
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoCotizaciones_Result>("GetListadoCotizaciones", whereStringParameter);
        }
    
        public virtual ObjectResult<GetListadoCotizacionesConsulta_Result> GetListadoCotizacionesConsulta(string whereString)
        {
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoCotizacionesConsulta_Result>("GetListadoCotizacionesConsulta", whereStringParameter);
        }
    
        public virtual ObjectResult<RepEstadoDeCuenta_Result> RepEstadoDeCuenta(string clienteID, string fechaDesde, string fechaHasta, Nullable<bool> incluirNCP)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var incluirNCPParameter = incluirNCP.HasValue ?
                new ObjectParameter("IncluirNCP", incluirNCP) :
                new ObjectParameter("IncluirNCP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepEstadoDeCuenta_Result>("RepEstadoDeCuenta", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter, incluirNCPParameter);
        }
    
        public virtual ObjectResult<RepEstadoDeCuentaTramitesDesagrupados_Result> RepEstadoDeCuentaTramitesDesagrupados(string clienteID, string fechaDesde, string fechaHasta, Nullable<bool> incluirNCP)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var incluirNCPParameter = incluirNCP.HasValue ?
                new ObjectParameter("IncluirNCP", incluirNCP) :
                new ObjectParameter("IncluirNCP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepEstadoDeCuentaTramitesDesagrupados_Result>("RepEstadoDeCuentaTramitesDesagrupados", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter, incluirNCPParameter);
        }
    
        public virtual ObjectResult<RepEstadoDeCuentaTramitesDesagrupados1_Result> RepEstadoDeCuentaTramitesDesagrupados1(string clienteID, string fechaDesde, string fechaHasta, Nullable<bool> incluirNCP)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var incluirNCPParameter = incluirNCP.HasValue ?
                new ObjectParameter("IncluirNCP", incluirNCP) :
                new ObjectParameter("IncluirNCP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepEstadoDeCuentaTramitesDesagrupados1_Result>("RepEstadoDeCuentaTramitesDesagrupados1", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter, incluirNCPParameter);
        }
    
        public virtual ObjectResult<RepEstadoDeCuenta1_Result> RepEstadoDeCuenta1(string clienteID, string fechaDesde, string fechaHasta, Nullable<bool> incluirNCP)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var incluirNCPParameter = incluirNCP.HasValue ?
                new ObjectParameter("IncluirNCP", incluirNCP) :
                new ObjectParameter("IncluirNCP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepEstadoDeCuenta1_Result>("RepEstadoDeCuenta1", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter, incluirNCPParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetDatosExpediente")]
        public virtual IQueryable<GetDatosExpediente_Result> GetDatosExpediente(string origen, Nullable<int> expedienteID)
        {
            var origenParameter = origen != null ?
                new ObjectParameter("Origen", origen) :
                new ObjectParameter("Origen", typeof(string));
    
            var expedienteIDParameter = expedienteID.HasValue ?
                new ObjectParameter("ExpedienteID", expedienteID) :
                new ObjectParameter("ExpedienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDatosExpediente_Result>("[BerkeDBEntities].[GetDatosExpediente](@Origen, @ExpedienteID)", origenParameter, expedienteIDParameter);
        }
    
        public virtual ObjectResult<DetallePagosPorDocumentoParaFactura1_Result> DetallePagosPorDocumentoParaFactura1(string clienteID, string fechaDesde, string fechaHasta)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetallePagosPorDocumentoParaFactura1_Result>("DetallePagosPorDocumentoParaFactura1", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<DetallePagosPorDocumentoParaFactura_Result> DetallePagosPorDocumentoParaFactura(string clienteID, string fechaDesde, string fechaHasta)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetallePagosPorDocumentoParaFactura_Result>("DetallePagosPorDocumentoParaFactura", clienteIDParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetRolRequierePermisosEspeciales")]
        public virtual IQueryable<GetRolRequierePermisosEspeciales_Result> GetRolRequierePermisosEspeciales(Nullable<int> rolID)
        {
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetRolRequierePermisosEspeciales_Result>("[BerkeDBEntities].[GetRolRequierePermisosEspeciales](@RolID)", rolIDParameter);
        }
    
        public virtual ObjectResult<GetMergeAviVencEspeciales_Result> GetMergeAviVencEspeciales(Nullable<System.DateTime> fechaBase, Nullable<int> clienteID, Nullable<int> plazoP, Nullable<bool> buscarComoMultiple)
        {
            var fechaBaseParameter = fechaBase.HasValue ?
                new ObjectParameter("FechaBase", fechaBase) :
                new ObjectParameter("FechaBase", typeof(System.DateTime));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var plazoPParameter = plazoP.HasValue ?
                new ObjectParameter("PlazoP", plazoP) :
                new ObjectParameter("PlazoP", typeof(int));
    
            var buscarComoMultipleParameter = buscarComoMultiple.HasValue ?
                new ObjectParameter("BuscarComoMultiple", buscarComoMultiple) :
                new ObjectParameter("BuscarComoMultiple", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMergeAviVencEspeciales_Result>("GetMergeAviVencEspeciales", fechaBaseParameter, clienteIDParameter, plazoPParameter, buscarComoMultipleParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetViaPorClienteAreaTable")]
        public virtual IQueryable<string> GetViaPorClienteAreaTable(Nullable<int> clienteID, Nullable<int> areaID, Nullable<int> viaID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var viaIDParameter = viaID.HasValue ?
                new ObjectParameter("ViaID", viaID) :
                new ObjectParameter("ViaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[BerkeDBEntities].[GetViaPorClienteAreaTable](@ClienteID, @AreaID, @ViaID)", clienteIDParameter, areaIDParameter, viaIDParameter);
        }
    
        public virtual ObjectResult<GetListadoGeneraldeDeudasPendientes_Result> GetListadoGeneraldeDeudasPendientes(string fechaDesde, string fechaHasta, string clienteID, string estado, Nullable<bool> datosClienteLocales, Nullable<bool> incluiFechaPago, string tramiteID, string hINro, string hIAnho, string actaNro, string actaAnio, string ciudadID, string paisID, string areaID, string unidadNegocioID)
        {
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var datosClienteLocalesParameter = datosClienteLocales.HasValue ?
                new ObjectParameter("DatosClienteLocales", datosClienteLocales) :
                new ObjectParameter("DatosClienteLocales", typeof(bool));
    
            var incluiFechaPagoParameter = incluiFechaPago.HasValue ?
                new ObjectParameter("IncluiFechaPago", incluiFechaPago) :
                new ObjectParameter("IncluiFechaPago", typeof(bool));
    
            var tramiteIDParameter = tramiteID != null ?
                new ObjectParameter("TramiteID", tramiteID) :
                new ObjectParameter("TramiteID", typeof(string));
    
            var hINroParameter = hINro != null ?
                new ObjectParameter("HINro", hINro) :
                new ObjectParameter("HINro", typeof(string));
    
            var hIAnhoParameter = hIAnho != null ?
                new ObjectParameter("HIAnho", hIAnho) :
                new ObjectParameter("HIAnho", typeof(string));
    
            var actaNroParameter = actaNro != null ?
                new ObjectParameter("ActaNro", actaNro) :
                new ObjectParameter("ActaNro", typeof(string));
    
            var actaAnioParameter = actaAnio != null ?
                new ObjectParameter("ActaAnio", actaAnio) :
                new ObjectParameter("ActaAnio", typeof(string));
    
            var ciudadIDParameter = ciudadID != null ?
                new ObjectParameter("CiudadID", ciudadID) :
                new ObjectParameter("CiudadID", typeof(string));
    
            var paisIDParameter = paisID != null ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(string));
    
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            var unidadNegocioIDParameter = unidadNegocioID != null ?
                new ObjectParameter("UnidadNegocioID", unidadNegocioID) :
                new ObjectParameter("UnidadNegocioID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoGeneraldeDeudasPendientes_Result>("GetListadoGeneraldeDeudasPendientes", fechaDesdeParameter, fechaHastaParameter, clienteIDParameter, estadoParameter, datosClienteLocalesParameter, incluiFechaPagoParameter, tramiteIDParameter, hINroParameter, hIAnhoParameter, actaNroParameter, actaAnioParameter, ciudadIDParameter, paisIDParameter, areaIDParameter, unidadNegocioIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetTotalPresupFactura")]
        public virtual IQueryable<GetTotalPresupFactura_Result> GetTotalPresupFactura(Nullable<int> presupuestoCabID)
        {
            var presupuestoCabIDParameter = presupuestoCabID.HasValue ?
                new ObjectParameter("PresupuestoCabID", presupuestoCabID) :
                new ObjectParameter("PresupuestoCabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalPresupFactura_Result>("[BerkeDBEntities].[GetTotalPresupFactura](@PresupuestoCabID)", presupuestoCabIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetSello")]
        public virtual IQueryable<GetSello_Result> GetSello(Nullable<int> clienteID, Nullable<int> monedaID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var monedaIDParameter = monedaID.HasValue ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSello_Result>("[BerkeDBEntities].[GetSello](@ClienteID, @MonedaID)", clienteIDParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<GetTramitesParaCotizaciones_Result> GetTramitesParaCotizaciones(Nullable<int> usuarioID, string whereString)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTramitesParaCotizaciones_Result>("GetTramitesParaCotizaciones", usuarioIDParameter, whereStringParameter);
        }
    
        [DbFunction("BerkeDBEntities", "ExisteCobroAsociado")]
        public virtual IQueryable<Nullable<bool>> ExisteCobroAsociado(Nullable<int> cobroID, Nullable<int> presupuestoCabID)
        {
            var cobroIDParameter = cobroID.HasValue ?
                new ObjectParameter("CobroID", cobroID) :
                new ObjectParameter("CobroID", typeof(int));
    
            var presupuestoCabIDParameter = presupuestoCabID.HasValue ?
                new ObjectParameter("PresupuestoCabID", presupuestoCabID) :
                new ObjectParameter("PresupuestoCabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<bool>>("[BerkeDBEntities].[ExisteCobroAsociado](@CobroID, @PresupuestoCabID)", cobroIDParameter, presupuestoCabIDParameter);
        }
    
        public virtual ObjectResult<GetListaPagoProveedores_Result> GetListaPagoProveedores(Nullable<int> usuarioID, string whereString)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var whereStringParameter = whereString != null ?
                new ObjectParameter("WhereString", whereString) :
                new ObjectParameter("WhereString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagoProveedores_Result>("GetListaPagoProveedores", usuarioIDParameter, whereStringParameter);
        }
    
        public virtual ObjectResult<GetListaPagosPendientesConso2_Result> GetListaPagosPendientesConso2(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaPagosPendientesConso2_Result>("GetListaPagosPendientesConso2", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetDatosBoletaDepCobro")]
        public virtual IQueryable<GetDatosBoletaDepCobro_Result> GetDatosBoletaDepCobro(Nullable<int> presupuestoCabID)
        {
            var presupuestoCabIDParameter = presupuestoCabID.HasValue ?
                new ObjectParameter("PresupuestoCabID", presupuestoCabID) :
                new ObjectParameter("PresupuestoCabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDatosBoletaDepCobro_Result>("[BerkeDBEntities].[GetDatosBoletaDepCobro](@PresupuestoCabID)", presupuestoCabIDParameter);
        }
    
        public virtual ObjectResult<GetListadoChequesEmitidos_Result> GetListadoChequesEmitidos(string proveedorID, string fechaDesde, string fechaHasta, string monedaID, string cuentaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            var cuentaIDParameter = cuentaID != null ?
                new ObjectParameter("CuentaID", cuentaID) :
                new ObjectParameter("CuentaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListadoChequesEmitidos_Result>("GetListadoChequesEmitidos", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter, cuentaIDParameter);
        }
    
        public virtual ObjectResult<GetListaFacturasProvPendientes_Result> GetListaFacturasProvPendientes(string proveedorID, string fechaDesde, string fechaHasta, string monedaID)
        {
            var proveedorIDParameter = proveedorID != null ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(string));
    
            var fechaDesdeParameter = fechaDesde != null ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(string));
    
            var fechaHastaParameter = fechaHasta != null ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(string));
    
            var monedaIDParameter = monedaID != null ?
                new ObjectParameter("MonedaID", monedaID) :
                new ObjectParameter("MonedaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaFacturasProvPendientes_Result>("GetListaFacturasProvPendientes", proveedorIDParameter, fechaDesdeParameter, fechaHastaParameter, monedaIDParameter);
        }
    
        public virtual ObjectResult<ListaSolArchivo> GetListaSolArchivo(Nullable<int> proveedorId, string nroFactura, Nullable<int> usuarioId)
        {
            var proveedorIdParameter = proveedorId.HasValue ?
                new ObjectParameter("ProveedorId", proveedorId) :
                new ObjectParameter("ProveedorId", typeof(int));
    
            var nroFacturaParameter = nroFactura != null ?
                new ObjectParameter("NroFactura", nroFactura) :
                new ObjectParameter("NroFactura", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("UsuarioId", usuarioId) :
                new ObjectParameter("UsuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListaSolArchivo>("GetListaSolArchivo", proveedorIdParameter, nroFacturaParameter, usuarioIdParameter);
        }
    
        [DbFunction("BerkeDBEntities", "GetAutorizacionMotivoPorDocumentoID")]
        public virtual IQueryable<AutorizacionMotivo> GetAutorizacionMotivoPorDocumentoID(Nullable<int> tipoDocumentoID, Nullable<int> documentoID, Nullable<int> usuarioID)
        {
            var tipoDocumentoIDParameter = tipoDocumentoID.HasValue ?
                new ObjectParameter("TipoDocumentoID", tipoDocumentoID) :
                new ObjectParameter("TipoDocumentoID", typeof(int));
    
            var documentoIDParameter = documentoID.HasValue ?
                new ObjectParameter("DocumentoID", documentoID) :
                new ObjectParameter("DocumentoID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AutorizacionMotivo>("[BerkeDBEntities].[GetAutorizacionMotivoPorDocumentoID](@TipoDocumentoID, @DocumentoID, @UsuarioID)", tipoDocumentoIDParameter, documentoIDParameter, usuarioIDParameter);
        }
    
        public virtual ObjectResult<DatosFacturaNC> GetDatosFacturaNC(string valorFiltro)
        {
            var valorFiltroParameter = valorFiltro != null ?
                new ObjectParameter("ValorFiltro", valorFiltro) :
                new ObjectParameter("ValorFiltro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatosFacturaNC>("GetDatosFacturaNC", valorFiltroParameter);
        }
    
        public virtual ObjectResult<ReporteExportacionStarsoftSerie2> GetReporteExportacionStarsoftSerie2(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<int> timbradoID, Nullable<bool> incluirAnulados)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var timbradoIDParameter = timbradoID.HasValue ?
                new ObjectParameter("TimbradoID", timbradoID) :
                new ObjectParameter("TimbradoID", typeof(int));
    
            var incluirAnuladosParameter = incluirAnulados.HasValue ?
                new ObjectParameter("IncluirAnulados", incluirAnulados) :
                new ObjectParameter("IncluirAnulados", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteExportacionStarsoftSerie2>("GetReporteExportacionStarsoftSerie2", fechaInicioParameter, fechaFinParameter, timbradoIDParameter, incluirAnuladosParameter);
        }
    
        public virtual ObjectResult<ReporteExportacionStarsoftSerie1> GetReporteExportacionStarsoftSerie1(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<int> timbradoID, Nullable<bool> incluirAnulados)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var timbradoIDParameter = timbradoID.HasValue ?
                new ObjectParameter("TimbradoID", timbradoID) :
                new ObjectParameter("TimbradoID", typeof(int));
    
            var incluirAnuladosParameter = incluirAnulados.HasValue ?
                new ObjectParameter("IncluirAnulados", incluirAnulados) :
                new ObjectParameter("IncluirAnulados", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteExportacionStarsoftSerie1>("GetReporteExportacionStarsoftSerie1", fechaInicioParameter, fechaFinParameter, timbradoIDParameter, incluirAnuladosParameter);
        }
    
        public virtual ObjectResult<ReporteFEEmitidos> GetReporteFE(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteFEEmitidos>("GetReporteFE", fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<ReporteNCEEmitidos> GetReporteNCE(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteNCEEmitidos>("GetReporteNCE", fechaInicioParameter, fechaFinParameter);
        }
    }
}
